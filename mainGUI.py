# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainGUI.ui'
#
# Created by: PyQt5 UI code generator 5.9.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(762, 333)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/logo_alpha.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(10, 10, 321, 301))
        self.frame.setFrameShape(QtWidgets.QFrame.Panel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.files_button = QtWidgets.QPushButton(self.frame)
        self.files_button.setGeometry(QtCore.QRect(10, 10, 141, 23))
        self.files_button.setObjectName("files_button")
        self.cB_textpaths = QtWidgets.QCheckBox(self.frame)
        self.cB_textpaths.setGeometry(QtCore.QRect(10, 40, 191, 17))
        self.cB_textpaths.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.cB_textpaths.setChecked(False)
        self.cB_textpaths.setObjectName("cB_textpaths")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(-10, 120, 341, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.cB_sv_avg = QtWidgets.QCheckBox(self.frame)
        self.cB_sv_avg.setGeometry(QtCore.QRect(10, 200, 203, 17))
        self.cB_sv_avg.setToolTip("")
        self.cB_sv_avg.setChecked(True)
        self.cB_sv_avg.setObjectName("cB_sv_avg")
        self.cB_sv_step = QtWidgets.QCheckBox(self.frame)
        self.cB_sv_step.setGeometry(QtCore.QRect(10, 220, 203, 17))
        self.cB_sv_step.setObjectName("cB_sv_step")
        self.cB_sv_indv = QtWidgets.QCheckBox(self.frame)
        self.cB_sv_indv.setGeometry(QtCore.QRect(10, 240, 203, 17))
        self.cB_sv_indv.setObjectName("cB_sv_indv")
        self.line_2 = QtWidgets.QFrame(self.frame)
        self.line_2.setGeometry(QtCore.QRect(-10, 180, 341, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.cB_filenames = QtWidgets.QCheckBox(self.frame)
        self.cB_filenames.setGeometry(QtCore.QRect(10, 60, 203, 17))
        self.cB_filenames.setChecked(True)
        self.cB_filenames.setObjectName("cB_filenames")
        self.cB_calc_avg = QtWidgets.QCheckBox(self.frame)
        self.cB_calc_avg.setGeometry(QtCore.QRect(10, 140, 203, 17))
        self.cB_calc_avg.setChecked(True)
        self.cB_calc_avg.setObjectName("cB_calc_avg")
        self.avg_name_edit = QtWidgets.QLineEdit(self.frame)
        self.avg_name_edit.setGeometry(QtCore.QRect(92, 160, 221, 20))
        self.avg_name_edit.setObjectName("avg_name_edit")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(10, 160, 81, 20))
        self.label.setObjectName("label")
        self.run_button = QtWidgets.QPushButton(self.frame)
        self.run_button.setGeometry(QtCore.QRect(10, 270, 75, 23))
        self.run_button.setObjectName("run_button")
        self.close_button = QtWidgets.QPushButton(self.frame)
        self.close_button.setGeometry(QtCore.QRect(240, 270, 75, 23))
        self.close_button.setObjectName("close_button")
        self.folder_button = QtWidgets.QPushButton(self.frame)
        self.folder_button.setGeometry(QtCore.QRect(170, 10, 141, 23))
        self.folder_button.setObjectName("folder_button")
        self.line_3 = QtWidgets.QFrame(self.frame)
        self.line_3.setGeometry(QtCore.QRect(-10, 80, 341, 16))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.cv_filter_edit = QtWidgets.QLineEdit(self.frame)
        self.cv_filter_edit.setGeometry(QtCore.QRect(90, 100, 221, 20))
        self.cv_filter_edit.setObjectName("cv_filter_edit")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(8, 100, 81, 20))
        self.label_3.setObjectName("label_3")
        self.log = QtWidgets.QTextEdit(self.centralwidget)
        self.log.setGeometry(QtCore.QRect(343, 30, 411, 281))
        self.log.setReadOnly(True)
        self.log.setObjectName("log")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(340, 10, 411, 16))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Arbin data processor v0.1"))
        self.files_button.setText(_translate("MainWindow", "Select files..."))
        self.cB_textpaths.setToolTip(_translate("MainWindow", "Use filepaths contained within \'cell_info.csv\'. Files other than \'cell_info.csv\' are ignored from initial folder or file selection. "))
        self.cB_textpaths.setText(_translate("MainWindow", "Use \'cell_info.csv\' filepaths"))
        self.cB_sv_avg.setText(_translate("MainWindow", "Save average data"))
        self.cB_sv_step.setToolTip(_translate("MainWindow", "Save capacity \'per step\' in addition to the default \'per cycle\'."))
        self.cB_sv_step.setText(_translate("MainWindow", "Save step data"))
        self.cB_sv_indv.setToolTip(_translate("MainWindow", "Saves a single file for each converted capacity type, i.e. mAh/g, mAh/cm2 and mAh/cm3."))
        self.cB_sv_indv.setText(_translate("MainWindow", "Save conversion data individually"))
        self.cB_filenames.setToolTip(_translate("MainWindow", "Use original filename instead of the name provided in \'cell_info.csv\' when exporting files."))
        self.cB_filenames.setText(_translate("MainWindow", "Use filename as cell name"))
        self.cB_calc_avg.setToolTip(_translate("MainWindow", "Calculates average data from data files."))
        self.cB_calc_avg.setText(_translate("MainWindow", "Calculate average data"))
        self.avg_name_edit.setPlaceholderText(_translate("MainWindow", "average_data"))
        self.label.setToolTip(_translate("MainWindow", "Used to name exported files containing the average data."))
        self.label.setText(_translate("MainWindow", "Average name:"))
        self.run_button.setText(_translate("MainWindow", "Run"))
        self.close_button.setText(_translate("MainWindow", "Close"))
        self.folder_button.setText(_translate("MainWindow", "Select folder..."))
        self.cv_filter_edit.setPlaceholderText(_translate("MainWindow", "1.1"))
        self.label_3.setToolTip(_translate("MainWindow", "For identifying CV steps. The ratio of the current at the start compared to the end of each CV step must be greater than this value."))
        self.label_3.setText(_translate("MainWindow", "CV filter ratio:"))
        self.label_2.setText(_translate("MainWindow", "Log"))

import resources_rc
